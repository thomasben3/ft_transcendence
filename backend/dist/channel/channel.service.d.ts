import { Repository } from 'typeorm';
import { Channel } from './channel.entity';
import { UserService } from 'src/user/user.service';
import { RelationnalChannel } from './relationnalChannel.entity';
import { MuteList } from './mutelist.entity';
import { BanList } from './banlist.entity';
import { Relationnal } from 'src/relationnal/relationnal.entity';
export declare class ChannelService {
    private channelRepository;
    private readonly userService;
    private relationnalChannelRepository;
    private relationnalRepository;
    private muteListRepository;
    private banListRepository;
    constructor(channelRepository: Repository<Channel>, userService: UserService, relationnalChannelRepository: Repository<RelationnalChannel>, relationnalRepository: Repository<Relationnal>, muteListRepository: Repository<MuteList>, banListRepository: Repository<BanList>);
    createChannel(channel_name: string, password: string, isPrivate: boolean): Promise<Channel>;
    getChannelById(channel_id: number): Promise<Channel>;
    getAllChannels(): Promise<Channel[]>;
    getPublicChannels(): Promise<Channel[]>;
    getProtectedChannels(): Promise<Channel[]>;
    getPrivateChannels(user_id: number): Promise<Channel[]>;
    checkPassword(channel_id: number, password: string): Promise<{
        message: string;
    }>;
    getChannelByName(channel_name: string): Promise<Channel>;
    deleteChannelById(invitation_id: number): Promise<void>;
    createRelationnalChannel(channel_id: number, user_id: number): Promise<boolean>;
    deleteRelationnalChannel(channel_id: number, user_id: number): Promise<boolean>;
    getAllUserInChannel(channel_id: number): Promise<RelationnalChannel[]>;
    getRelationnalChannelByUserId(user_id: number): Promise<RelationnalChannel[]>;
    muteUser(user_id: number, channel_id: number): Promise<void>;
    checkMuteUser(user_id: number, channel_id: number): Promise<boolean>;
    unmuteUser(user_id: number, channel_id: number): Promise<MuteList>;
    getMutebyUserAndChannelId(user_id: number, channel_id: number): Promise<MuteList>;
    banUser(user_id: number, channel_id: number): Promise<void>;
    checkUnbanUser(user_id: number, channel_id: number): Promise<boolean>;
    unbanUser(user_id: number, channel_id: number): Promise<void>;
    getBanByUserAndChannel(user_id: number, channel_id: number): Promise<BanList>;
    getOwner(channel_id: number): Promise<RelationnalChannel>;
    getAdmins(channel_id: number): Promise<RelationnalChannel[]>;
    getBannedUsers(channel_id: number): Promise<any[]>;
    getMutedUsers(channel_id: number): Promise<any[]>;
    promoteToAdmin(channel_id: number, user_id: number): Promise<RelationnalChannel>;
    demoteToUser(channel_id: number, user_id: number): Promise<RelationnalChannel>;
    resetPassword(id: number): Promise<boolean>;
    changePassword(id: number, password: string): Promise<boolean>;
    switchToPrivate(id: number): Promise<boolean>;
    switchToPublic(id: number): Promise<boolean>;
    changeName(id: number, name: string): Promise<boolean>;
}
