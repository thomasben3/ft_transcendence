import { OnGatewayDisconnect } from "@nestjs/websockets";
import { Server, Socket } from "socket.io";
import { ChannelService } from "src/channel/channel.service";
import { MessageService } from "src/messages/message.service";
import { UserService } from '../user/user.service';
import { SocketService } from "./socket.service";
export declare class SocketEvents implements OnGatewayDisconnect {
    private readonly socketService;
    private readonly userService;
    private readonly messageService;
    private readonly channelService;
    constructor(socketService: SocketService, userService: UserService, messageService: MessageService, channelService: ChannelService);
    server: Server;
    handleConnection(client: Socket): Promise<void>;
    handleDisconnect(client: Socket): Promise<void>;
    join_channel(client: any, data: any): Promise<void>;
    leave_channel(client: any, data: any): Promise<void>;
    join_friend_channel(client: any, data: any): Promise<void>;
    handleMessage(client: any, data: any): Promise<void>;
    kickFromChannel(client: any, data: any): Promise<void>;
    ban_from_channel(client: any, data: any): Promise<void>;
    unban_from_channel(client: any, data: any): Promise<void>;
    handlePrivateMessage(client: any, data: any): Promise<void>;
    getConnectedUsers(client: any, data: any): Promise<void>;
    getAllUsers(client: any, data: any): Promise<void>;
    promoteToAdmin(client: any, data: any): Promise<void>;
    demoteToUser(client: any, data: any): Promise<void>;
    spectate(client: any, data: any): Promise<void>;
    removeFromQueue(id: number): void;
    removeFromHardcoreQueue(id: number): void;
    addPlayerToQueue(client: any, data: any): Promise<void>;
    addPlayerToHardcoreQueue(client: any, data: any): Promise<void>;
    getPlayerInfos(client: any, data: any): void;
    leaveGame(client: any, data: any): Promise<void>;
    sendPaddlePos(client: any, data: any): void;
    askingInGameUsers(client: any): void;
    inviteFriendToPlay(data: any): void;
    gameInvitationDeclined(data: any): void;
    gameInvitAccepted(data: any): void;
    cancelNotif(data: any): void;
    getScore(client: any, data: any): void;
    launchGameWithFriend(data: any): Promise<void>;
    getAllGame(client: any, data: any): Promise<void>;
}
